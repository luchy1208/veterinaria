# Generated by Django 4.2.3 on 2023-08-11 13:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userFoto', models.FileField(blank=True, db_comment='Foto del Usuario', null=True, upload_to='fotos/')),
                ('userTipo', models.CharField(choices=[('Administrador', 'Administrador'), ('Veterinario', 'Veterinario'), ('Auxiliar', 'Auxiliar'), ('Cliente', 'Cliente')], db_comment='Nombre Tipo de usuario', max_length=18)),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora del registro')),
                ('fechaHoraActualizacion', models.DateTimeField(auto_now=True, db_comment='Fecha y hora última actualización')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AgendarCita',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fechaHoraCita', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora de la cita')),
                ('fechaHoraActualizacion', models.DateTimeField(auto_now=True, db_comment='Fecha y hora última actualización')),
            ],
        ),
        migrations.CreateModel(
            name='CitaVeterinaria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citVetCodigo', models.IntegerField(db_comment='Codigo de la cita con el veterinario', unique=True)),
                ('citVetAcompanante', models.CharField(db_comment='Nombre de la persona que ingresa con la mascota', max_length=100)),
                ('citVetResultadoCita', models.TextField(db_comment='Resultado de la cita', null=True)),
                ('citVetEstado', models.CharField(choices=[('Pendiente', 'Pendiente'), ('Atendida', 'Atendida'), ('Cancelada', 'Cancelada')], db_comment='Estado de la cita', max_length=10, unique=True)),
                ('citPrecio', models.IntegerField(db_comment='valor de la consulta medica')),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora del registro')),
                ('fechaHoraActualizacion', models.DateTimeField(auto_now=True, db_comment='Fecha y hora última actualización')),
                ('citVetAgeCita', models.ForeignKey(db_comment='id de la mascota', on_delete=django.db.models.deletion.PROTECT, to='appClinica.agendarcita')),
            ],
        ),
        migrations.CreateModel(
            name='ElementoSubTipoRemision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eleSubTipRemNombre', models.CharField(db_comment='Nombre del subtipo de elemento de la remision ej:Hemograma', max_length=100)),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora de creacion de la remision')),
            ],
        ),
        migrations.CreateModel(
            name='ExamenClinico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exaCliTemperatura', models.SmallIntegerField(db_comment='T° corporal: 35,36,37..')),
                ('exaClifreCardiaca', models.SmallIntegerField(db_comment='Frecuencia cardiaca:..', null=True)),
                ('exaCliFreRespiratoria', models.SmallIntegerField(db_comment='Frecuencia Respiratoria:..', null=True)),
                ('exaCliPulso', models.SmallIntegerField(db_comment='numero de pulsaciones por minuto:..', null=True)),
                ('exaCliEstConciencia', models.CharField(db_comment='describir el estado de conciencia de la mascota', max_length=50)),
                ('exaCliTemperamento', models.CharField(db_comment='Temperamento de la mascota', max_length=25)),
                ('exaCliSisDermatológico', models.TextField(db_comment='descripcion del sistema Dermatológico', null=True)),
                ('exaCliSisRespiratorio', models.TextField(db_comment='descripcion del sistema Respiratorio', null=True)),
                ('exaCliSisCardiovascular', models.TextField(db_comment='descripcion del sistema Cardiovascular', null=True)),
                ('exaCliSisDigestivo', models.TextField(db_comment='descripcion del sistema Digestivo', null=True)),
                ('exaCliSisUrinario', models.TextField(db_comment='descripcion del sistema Urinario', null=True)),
                ('exaCliSisReproductor', models.TextField(db_comment='descripcion del sistema Reproductor', null=True)),
                ('exaCliSisLocomotor', models.TextField(db_comment='descripcion del sistema Locomotor', null=True)),
                ('exaCliOftalmológico', models.TextField(db_comment='descripcion del examen clinico Oftalmológico', null=True)),
                ('exaCliOtológico', models.TextField(db_comment='descripcion del examen clinico Otológico', null=True)),
                ('exaCliNeurológico', models.TextField(db_comment='descripcion del examen clinico Neurológico', null=True)),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora del registro de la mascota')),
                ('fechaHoraActualizacion', models.DateTimeField(auto_now=True, db_comment='Fecha y hora última actualización de la mascota')),
            ],
        ),
        migrations.CreateModel(
            name='Servicios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serNombre', models.CharField(db_comment='Nombre del servicio', max_length=100)),
                ('serTipo', models.CharField(choices=[('ServicioBasico', 'ServicioBasico'), ('ServicioBienestar', 'ServicioBienestar'), ('Urgencias', 'Urgencias'), ('OtrosServicios', 'OtrosServicios')], db_comment='tipo de servicio', max_length=17)),
                ('fechaHoraActualizacion', models.DateTimeField(auto_now=True, db_comment='Fecha y hora última actualización')),
            ],
        ),
        migrations.CreateModel(
            name='TipoRemision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipoRemNombre', models.CharField(db_comment='Nombre del tipo de remision ej:Examen Laboratorio', max_length=100)),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora de creacion de la de remision')),
            ],
        ),
        migrations.CreateModel(
            name='Remision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remCodigo', models.IntegerField(db_comment='Codigo de la remision', unique=True)),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora de creacion de la remision')),
                ('remCitVeterinaria', models.ForeignKey(db_comment='se trae la citaveterinaria', on_delete=django.db.models.deletion.PROTECT, to='appClinica.citaveterinaria')),
                ('remEleSubTipo', models.ForeignKey(db_comment='se trae el elelemnto sub tipo de la remision', on_delete=django.db.models.deletion.PROTECT, to='appClinica.elementosubtiporemision')),
            ],
        ),
        migrations.CreateModel(
            name='Mascota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('masCodigo', models.CharField(db_comment='Código único asignado a la mascota', max_length=15, unique=True)),
                ('masNombre', models.CharField(db_comment='Nombre de la mascota', max_length=50)),
                ('masEspecie', models.CharField(choices=[('Canino', 'Canino'), ('Felino', 'Felino'), ('Reptil', 'Reptil'), ('Roedor', 'Roedor'), ('Ave', 'Ave'), ('Pez', 'Pez'), ('Otro', 'Otro')], db_comment='Tipo de mascota', max_length=7)),
                ('masRaza', models.CharField(db_comment='Raza de la mascota', max_length=15)),
                ('masColor', models.CharField(db_comment='Color de la mascota', max_length=15)),
                ('masSexo', models.CharField(choices=[('Hembra', 'Hembra'), ('Macho', 'Macho')], db_comment='sexo de la mascota', max_length=7)),
                ('masFechaNacimiento', models.DateField(db_comment='Fecha de nacimiento de la mascota')),
                ('masFoto', models.FileField(blank=True, db_comment='Foto de la mascota', null=True, upload_to='fotos/')),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora del registro de la mascota')),
                ('fechaHoraActualizacion', models.DateTimeField(auto_now=True, db_comment='Fecha y hora última actualización de la mascota')),
                ('masCliUsuario', models.ForeignKey(db_comment='usuario #que lleva la mascota ahh la consulta veterinaria', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoriaClinica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hisCliCodigo', models.IntegerField(db_comment='codigo de Historia Clinica', unique=True)),
                ('hisCliAcompanante', models.CharField(db_comment='Nombre de la persona que ingresa con la mascota', max_length=100)),
                ('hisCliMotConsulta', models.TextField(db_comment='detalladamente se escribe el motivo porque se lleva la mascota a consulta', null=True)),
                ('fechaHoraCreacion', models.DateTimeField(auto_now_add=True, db_comment='Fecha y hora de creacion de la Historia Clinica')),
                ('fechaHoraActualizacion', models.DateTimeField(auto_now=True, db_comment='Fecha y hora última actualización de la mascota')),
                ('hisCliUltCelo', models.DateField(db_comment='Hace referencia a la fecha del ultimo celo de la mascota')),
                ('hisCliNumPartos', models.CharField(db_comment='Numero de partos de la mascota', max_length=15, unique=True)),
                ('hisCliUltVacunacion', models.DateField(db_comment='fecha vacunacion')),
                ('hisCliProVacunacion', models.CharField(db_comment='nombre del producto utilizado en la vacunacion', max_length=25)),
                ('hisCliConParasitos', models.DateField(db_comment='fecha de aplicacion del producto para control de parasitos')),
                ('hisCliProDesparasitar', models.CharField(db_comment='nombre del producto utilizado para desparasitar', max_length=25)),
                ('hisCliDieta', models.CharField(choices=[('Concentrado', 'Concentrado'), ('DietaBARF', 'DietaBARF'), ('DietaBlanda', 'DietaBlanda'), ('ComidaCasera', 'ComidaCasera'), ('Otra', 'Otra')], db_comment='Tipo de dieta', max_length=30)),
                ('hisCliFreDieta', models.CharField(db_comment='La frecuencia con que se alimentala la mascota', max_length=15)),
                ('hisCliAnamnesicos', models.TextField(db_comment='En anamnesicos se describe la sintomatologia del animal', null=True)),
                ('hisCliEnfAnteriores', models.TextField(db_comment='enfermedades que ha sufrido la mascota anteriormente', null=True)),
                ('hisCliCirPrevias', models.TextField(db_comment='cirugias realizadas anteriormente', null=True)),
                ('hisCliDiaDiferencial', models.CharField(db_comment='otras enfermedades que haya presentado la mascota', max_length=100)),
                ('hisCliDiaPresuntivo', models.CharField(db_comment='El posible diagnostico presuntivo', max_length=50)),
                ('hisCliEvolucion', models.CharField(db_comment='La evolucion de la mascota o pronostico', max_length=50)),
                ('hisCliExaClinico', models.ForeignKey(db_comment='Informacion del examen clinico', on_delete=django.db.models.deletion.PROTECT, to='appClinica.examenclinico')),
                ('hisCliMascota', models.ForeignKey(db_comment='Informacion de la mascota', on_delete=django.db.models.deletion.PROTECT, to='appClinica.mascota')),
                ('hisCliVetUsuario', models.ForeignKey(db_comment='Hace referencia a usuario', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='elementosubtiporemision',
            name='eleSubTipRemision',
            field=models.ForeignKey(db_comment='Nombre del tipo de remision', on_delete=django.db.models.deletion.PROTECT, to='appClinica.tiporemision'),
        ),
        migrations.AddField(
            model_name='citaveterinaria',
            name='citVetHisClinica',
            field=models.ForeignKey(db_comment='historia Clinica', on_delete=django.db.models.deletion.PROTECT, to='appClinica.historiaclinica'),
        ),
        migrations.AddField(
            model_name='citaveterinaria',
            name='citVetMascota',
            field=models.ForeignKey(db_comment='id de la mascota', on_delete=django.db.models.deletion.PROTECT, to='appClinica.mascota'),
        ),
        migrations.AddField(
            model_name='agendarcita',
            name='ageCitMascota',
            field=models.ForeignKey(db_comment='la mascota', on_delete=django.db.models.deletion.PROTECT, to='appClinica.mascota'),
        ),
        migrations.AddField(
            model_name='agendarcita',
            name='ageCitTipServicios',
            field=models.ForeignKey(db_comment='Servicios que ofrece la clinica', on_delete=django.db.models.deletion.PROTECT, to='appClinica.servicios'),
        ),
    ]
